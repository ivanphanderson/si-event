stages:
  - test
  - sonarqube
  - deploy


test:
  image: python:3.8.8
  stage: test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  before_script:
    - if [[ $CI_COMMIT_REF_NAME == master ]]; then ENVIRONMENT="PRODUCTION"; fi
    - if [[ $CI_COMMIT_REF_NAME == staging ]]; then ENVIRONMENT="STAGING"; else ENVIRONMENT="DEVELOPMENT"; fi
    - pip install -r requirements.txt
    - python manage.py migrate
    - python manage.py collectstatic --no-input
  when: on_success
  script:
    - coverage run --include="./*/*" --omit="./manage.py,./si_event/settings.py" manage.py test
    - coverage report -m
    - coverage xml -i
  artifacts:
    paths:
      - coverage.xml


sonarqube:
  stage: sonarqube
  only:
    - staging
    - merge_requests
    - master
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner -X -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$SONAR_PROJECT_KEY
  allow_failure: true

deployment_production:
  image: ruby:latest
  stage: deploy
  before_script:
    - gem install dpl
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_API_KEY
  environment:
    name: master
    url: $HEROKU_APP_HOST
  only:
    - master

deployment_staging:
  image: ruby:latest
  stage: deploy
  before_script:
    - gem install dpl
  script:
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_STAGING --api-key=$HEROKU_API_KEY_STAGING
  environment:
    name: staging
    url: $HEROKU_APP_HOST_STAGING
  only:
    - staging
  allow_failure: true